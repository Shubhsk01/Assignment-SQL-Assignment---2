use sakila;

-- Q1. Retrieve the total of rentals made in the sakila database.
-- Solution:
SELECT 
    COUNT(rental_id)
FROM
    rental;

-- Q2. Find the average rental duration (in days) of movies rented from the sakila database.
-- Solution:
SELECT 
    AVG(rental_duration)
FROM
    film;

-- Q3. Display first name and last name of customers in uppercase.
-- Solution:
SELECT 
    UPPER(first_name), UPPER(last_name)
FROM
    customer;

-- Q4. Extract the month from the rental date and display it alongside the rental ID.
-- Solution:
SELECT 
    rental_id, MONTH(rental_date)
FROM
    rental;

-- Q5. Retrieve the count of rentals for each customer(display customer ID and the count of rentals).
-- Solutions:
SELECT 
    customer_id, COUNT(rental_id)
FROM
    rental
GROUP BY customer_id;

-- Q6. Find the total revenue generated by each store?
-- Solution:
SELECT 
    s.store_id, SUM(p.amount) AS Total_revenue
FROM
    payment p
        INNER JOIN
    rental r ON p.rental_id = r.rental_id
        INNER JOIN
    inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN
    store s ON i.store_id = s.store_id
GROUP BY s.store_id;

-- Q7. Display the title of the movie, customer's first name, and last name who rented it.
-- Solution:
SELECT 
    f.title, c.first_name, c.last_name
FROM
    customer c
        INNER JOIN
    rental r ON c.customer_id = r.customer_id
        INNER JOIN
    inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN
    film f ON i.film_id = f.film_id;
    
    -- Q8. Retrieve the name of all actors who have appeared in the film " ACE GOLDFINGER "
    -- Solution:
SELECT 
    f.title,
    CONCAT(a.first_name, ' ', a.last_name) AS Actor_name
FROM
    actor a
        INNER JOIN
    film_actor fa ON a.actor_id = fa.actor_id
        INNER JOIN
    film f ON fa.film_id = f.film_id
WHERE
    f.title = 'ACE GOLDFINGER';
    
    -- Q9. Determine the total number of rentals for each category of movies. 
    -- Solutions:
    SELECT 
    c.name AS category, COUNT(r.rental_id) AS total_rentals
FROM
    rental r
        INNER JOIN
    inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN
    film f ON i.film_id = f.film_id
        INNER JOIN
    film_category fc ON f.film_id = fc.film_id
        INNER JOIN
    category c ON fc.category_id = c.category_id
GROUP BY c.name;

-- Q10. Find the average rental rate of movies in each language. 
-- Solution:
SELECT 
    l.name AS Language, AVG(f.rental_rate) AS Avg_rental_rate
FROM
    film f
        INNER JOIN
    language l ON f.language_id = l.language_id
GROUP BY l.name;

-- 11. Retrieve the customer names alogn with the total amount they have spent on rental. 
-- Solution:
SELECT 
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    SUM(p.amount) AS Total_amount_spent
FROM
    payment p
        INNER JOIN
    customer c ON p.customer_id = c.customer_id
GROUP BY customer_name;

-- Q12. List the titles of movies rented by each customer in a particular city(e.g., "London"). 
-- Solution:
SELECT 
    CONCAT(c.first_name, ' ', c.last_name) AS Customer_Name,
    f.title AS Movie_Title,
    city
FROM
    customer c
        INNER JOIN
    address a ON c.address_id = a.address_id
        INNER JOIN
    city ci ON a.city_id = ci.city_id
        INNER JOIN
    rental r ON c.customer_id = r.customer_id
        INNER JOIN
    inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN
    film f ON i.film_id = f.film_id
GROUP BY Customer_Name;

-- Q13. Display the top 5 rented movies along with the number of times they've been rented. 
-- Solution:
SELECT 
    f.title AS Movies, COUNT(r.rental_id)
FROM
    rental r
        INNER JOIN
    inventory i ON r.inventory_id = i.inventory_id
        INNER JOIN
    film f ON i.film_id = f.film_id
GROUP BY movies
LIMIT 5 ;

-- Q14. Determine the customers who have rented movies from both store ( store ID 1 and store ID 2). 
-- Solution:
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    COUNT(DISTINCT r1.rental_id) AS rentals_store_1,
    COUNT(DISTINCT r2.rental_id) AS rentals_store_2
FROM
    customer c
        JOIN
    rental r1 ON c.customer_id = r1.customer_id
        JOIN
    inventory i1 ON r1.inventory_id = i1.inventory_id
        JOIN
    rental r2 ON c.customer_id = r2.customer_id
        JOIN
    inventory i2 ON r2.inventory_id = i2.inventory_id
WHERE
    i1.store_id = 1 AND i2.store_id = 2
GROUP BY c.customer_id , c.first_name , c.last_name
HAVING COUNT(DISTINCT i1.inventory_id) > 0
    AND COUNT(DISTINCT i2.inventory_id) > 0;
